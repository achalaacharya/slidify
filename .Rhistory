install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("tm")
install.packages("RWeka")
install.packages("RWeka")
setwd("/home/minty/Desktop/Learn_R")
teens <- read.csv("snsdata.csv")
setwd("/home/minty/Desktop/Learn_R")
getwd()
teens <- read.csv("snsdata.csv")
str(teens)
table(teens$gender)
table(teens$gender, useNA = "ifany")
summary(teens$age)
teens$age <- ifelse(teens$age >= 13 & teens$age < 20,
teens$age, NA)
summary(teens$age)
teens$female <- ifelse(teens$gender == "F" &
!is.na(teens$gender), 1, 0)
teens$no_gender <- ifelse(is.na(teens$gender), 1, 0)
table(teens$gender, useNA = "ifany")
table(teens$female, useNA = "ifany")
table(teens$no_gender, useNA = "ifany")
mean(teens$age) # doesn't work
mean(teens$age, na.rm = TRUE)
aggregate(data = teens, age ~ gradyear, mean, na.rm = TRUE)
ave_age <- ave(teens$age, teens$gradyear,
FUN = function(x) mean(x, na.rm = TRUE))
install.packages("stats")
install.packages("stats")
library(caret)
?qplot
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
x <- list(a = matrix(1:4, 2,2), b = matrix(1:6, 3, 2))
x
lapply(x, function(elt) elt[,1])
library(datasets)
data(iris)
?iris
class(iris)
names(iris)
split(iris, iris$Species)
y <- split(iris, iris$Species)
)
class(y)
y[1]
y[5]
y[3]
x<- y[3]
class[x]
x[1]
?subset
z <- subset(iris, iris$Species = "virginica")
z <- subset(iris, iris$Species == "virginica")
z
mean(x$Sepal.Length)
str(x)
summary(x)
names(x)
mean(z$Sepal.Length)
names(z)
a<- apply(iris[,1:4],2,mean)
a
mean(iris$Sepal.Length)
mean(iris$Sepal.Width)
mean(iris$Petal.Length)
mean(iris$Petal.Width)
b <- apply(iris[,1:4,1,mean]
)
b <- apply(iris[,1:4],1,mean)
c<- apply(iris,1, mean)
c
apply(iris,2,mean)
rm(a)
rm(b)
rm(c)
data(mtcars)
a<- split(mtcars, mtcars$cyl)
a
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mps,mtcars$cyl), mean)
sapply(split(mtcars$mpg,mtcars$cyl), mean)
lapply(mtcars, mean)
names(mtcars)
sapply(split(mtcars$cyl,mtcars$hp), mean)
rm(a)
a<- split(mtcars, mtcars.cyl==4)
a<- subset(mtcars, mtcars.cyl==4)
a<- subset(mtcars, mtcars$cyl==4)
names(a)
mean(a$hp)
i <- mean(a$hp)
a<- subset(mtcars, mtcars$cyl==8)
j <- mean(a$hp)
j-1
j-i
debug(ls)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL # sets the value of m to NULL (provides a default if cacheSolve has not yet been used)
y <- NULL # sets the value of y to NULL (provides a default if cacheSolve has not yet been used)
setmatrix <- function(y) { #set the value of the matrix
x <<- y ## caches the inputted matrix so that cacheSolve can check whether it has changed (note this is within the setmatrix function)
m <<- NULL # # sets the value of m (the matrix inverse if used cacheSolve) to NULL
}
getmatrix <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix, # creates a list to house the four functions
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function (x, ...) {
# Need to compare matrix to what was there before!
m <- x$getinverse() # if an inverse has already been calculated this gets it
if(!is.null(m)){ # check to see if cacheSolve has been run before
message("getting cached data")
return(m)
}
# otherwise
z <- x$getmatrix() # run the getmatrix function to get the value of the input matrix
# run the setmatrix function on the input matrix to cache it
m <- solve(z, ...) # compute the value of the inverse of the input matrix
x$setinverse(m) # run the setinverse function on the inverse to cache the inverse
m # return the inverse
}
l
all.names
makeCacheMatrix <- function(x = matrix()) {
m <- NULL # sets the value of m to NULL (provides a default if cacheSolve has not yet been used)
y <- NULL # sets the value of y to NULL (provides a default if cacheSolve has not yet been used)
setmatrix <- function(y) { #set the value of the matrix
x <<- y ## caches the inputted matrix so that cacheSolve can check whether it has changed (note this is within the setmatrix function)
m <<- NULL # # sets the value of m (the matrix inverse if used cacheSolve) to NULL
}
getmatrix <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix, # creates a list to house the four functions
setinverse = setinverse,
getinverse = getinverse)
}
rm(cacheSolve)
rm(cacheSolve)
cacheSolve <- function (x, ...) {
# Need to compare matrix to what was there before!
m <- x$getinverse() # if an inverse has already been calculated this gets it
if(!is.null(m)){ # check to see if cacheSolve has been run before
message("getting cached data")
return(m)
}
# otherwise
z <- x$getmatrix() # run the getmatrix function to get the value of the input matrix
# run the setmatrix function on the input matrix to cache it
m <- solve(z, ...) # compute the value of the inverse of the input matrix
x$setinverse(m) # run the setinverse function on the inverse to cache the inverse
m # return the inverse
}
library(nlme)
library(lattice)
xyplot(weight ~ Time| Diet, BodyWeight)
library(datasets)
library(airquality)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = .~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = .~ factor(Month))
qplot(Wind, Ozone, data = airquality) #, facets = .~ factor(Month))
getwd()
install.packages("shiny")
setwd("~/Coursera/DataProducts/Project/data")
data <- read.csv('ageatfirstmarriage.csv')
data$Gender
unique(data$Gender)
?linePlot
?line
names(data)
?runApp
setwd("~/Coursera/DataProducts/Project")
runApp('Project')
ibrary(shiny)
library(shiny)
runApp('Project')
setwd("~/Coursera/DataProducts/Project")
runApp('Project')
runApp("Project")
setwd("~/Coursera/DataProducts/Project")
runApp('Project')
getwd()
setwd("/home/minty/Coursera/DataProducts")
runApp('Project')
runApp('Project')
runApp('Project')
runApp('Project')
?reactive
head(data)
runApp('Project')
runApp('Project')
runApp('Project')
runApp('Project')
runApp('Project')
runApp('Project')
runApp('Project')
runApp('Project')
setwd("./data")
data <- read.csv('ageatfirstmarriage.csv')
runApp('Project')
library(datasets)
?datasets
library(help = "datasets")
data <- discoveries
class(data)
data(discoveries)
data <- data(discoveries, package = datasets)
data <- data(discoveries, package = "datasets")
setwd("~/Coursera/DataProducts")
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
data <- read.csv('ageatfirstmarriage.csv')
data <- read.csv('ageatfirstmarriage.csv')
runApp('Test')
runApp('Test')
data <- read.csv('ageatfirstmarriage.csv')
data <- read.csv('ageatfirstmarriage.csv')
data <- read.csv('ageatfirstmarriage')
if (input$gender == "Male") {
AgeData <- filter(data, Gender == "Male")
data <- read.csv('ageatfirstmarriage')
data <- read.csv('ageatfirstmarriage')
setwd("~/Coursera/DataProducts/Test/data")
data <- read.csv('ageatfirstmarriage.csv')
runApp('Test')
setwd("~/Coursera/DataProducts/Test")
rm(data)
data <- read.csv('ageatfirstmarriage.csv')
data <- read.csv('ageatfirstmarriage.csv')
data <- read.csv('ageatfirstmarriage.csv')
View(teens)
ageatfirstmarriage <- read.csv("~/Coursera/DataProducts/Test/data/ageatfirstmarriage.csv")
View(ageatfirstmarriage)
View(ageatfirstmarriage)
runApp('Test')
setwd("~/Coursera/DataProducts/Test")
runApp('Test')
setwd("~/Coursera/DataProducts/Test")
setwd("~/Coursera/DataProducts")
runApp('Test')
AgeData <- filter(ageatfirstmarriage, Gender == "Female")
library(dplyr)
AgeData <- filter(ageatfirstmarriage, Gender == "Male")
AgeData[,c("Year", "age.at.first.marriage")
AgeData[,c("Year", "age.at.first.marriage")]
head(AgeData)
AgeData[,c("Year", "Age.at.first.marriage")]
runApp('Test')
plot(AgeData[,c("Year", "Age.at.first.marriage")]
main=input$gender,
ylab="Age at First Marriage",
xlab="Year")
plot(AgeData[,c("Year", "Age.at.first.marriage")]
main=input$gender,
ylab="Age at First Marriage",
xlab="Year")
runApp('Test')
library(datasets)
datasets)help
help(datasets)
library(help = "datasets")
WorldPhones
USArrests
head(WorldPhones)
names(WorldPhones)
names(WorldPhones)
WorldPhones <- WorldPhones
WorldPhones <- as.data.frame(WorldPhones
)
head(WorldPhones)
nmes(WorldPhones)
names(WorldPhones)
Titanic
USPersonalExpenditure
esoph
euro
rivers
women
USPersonalExpenditure
runApp('Test')
runApp('Test')
runApp('Test')
?fill
?barplot
runApp('Test')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library(devtools)
install.packages("RCurl")
install.packages('devtools')
install.packages('devtools')
library(devtools)
install.packages('devtools')
library(devtools)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='courserashinyassignment',
token='687619855C7D6454BE379A6B4FEF8433',
secret='9rGm8h7qVE0D4WSIlJh6Dc6/n1vZvaVpL3/Gc4w2')
library(shinyapps)
shinyapps::deployApp('/home/minty/Coursera/DataProducts/Test')
install.packages('devtools')
library(devtools)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='courserashinyassignment',
token='687619855C7D6454BE379A6B4FEF8433',
secret='9rGm8h7qVE0D4WSIlJh6Dc6/n1vZvaVpL3/Gc4w2')
library(shinyapps)
shinyapps::deployApp('/home/minty/Coursera/DataProducts/Test')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
setwd("~/Coursera/DataProducts")
author("Achala")
summary(USPersonalExpenditure)
## Introduction
